package AFPD;

import java.util.Scanner;

 // @author Juan Rueda

public class AFPD {

    
    public static void main(String[] args) {
        
        //En esta seccion se define el automata, pero no se como hacer leer archivos 
        //como pide el profe, por lo que lo deje manual, con el ejemplo de la guia,
        //para poder trabajar
        String[] Sigma = {"a","b"};
        String[] Q = {"q0","q1"};
        String q_0 = "q0";
        String[] F ={"q0","q1"};
        String[] Gamma = {"A"};
        String[][] delta = {{"q0,$|A","q1,A|$"},{"","q1,A|$"}};
       
        //Dividire delta en dos funciones que procesaran los estados (deltaS)
        // y la Pila (DeltaG).
        String[][] deltaS = new String[Q.length][Sigma.length];
        String[][] deltaG = new String[Q.length][Sigma.length];
        
        //Asigna los valores, en forma de matriz a deltaS
        for (int i=0; i<Q.length; i++){
            for (int j=0; j<Sigma.length; j++){
                if (delta[i][j].length() == 6 ){
                    deltaS[i][j] = delta[i][j].substring(0,2);
                }
                //Si una transicion no esta definida la abortaremos
                if("".equals(delta[i][j])){
                    deltaS[i][j] = "";
                }
            }
        }
        
        //Asigna los valores, en forma de matriz a deltaG
        for (int i=0; i<Q.length; i++){
            for (int j=0; j<Sigma.length; j++){
                if (delta[i][j].length() == 6){
                    deltaG[i][j] = delta[i][j].substring(3);
                }
                //Si una transicion no esta definida la abortaremos
                if("".equals(delta[i][j])){
                    deltaG[i][j] = "";
                }
            }
        }
        
        
        //Estas son variables que usare para identificar que letra del lenguaje
        // y en que estado de de Q se encuentra una configuración instantanea
        //Ademas asumo que que la cadena sera abortada para garantizar que no 
        // aceptara cadenas sin procesar, ademas de inicializar la Pila y el tope.
        String Pila = "";
        int letra = 0;
        int estado = 0;
        int supervisor = 0; // lo usare para verificar si una letra sa sale del alfabeto
        String Tope = "";
        String status = "Rejected";
        
        
        //Introduccir la cadena que desee comprobar si pertenese al lenguaje
        //correspondiente
        Scanner myObj = new Scanner(System.in);
        String ejemplo;
        System.out.println("Cadena que desea procesar"); 
        ejemplo = myObj.nextLine();
        
        //inicialización de la configuración instantanea
        String[] configuracion = {q_0,ejemplo,Pila};
        System.out.println("(" + configuracion[0] + "," + configuracion[1] + "," + configuracion[2] + ")");
        
        //Si la cadena es vacia ($) verifica si el estado inicial es de aceptación
        if("$".equals(ejemplo)){
            for (String F1 : F) {
                if (F1.equals(q_0)) {
                    status = "Accepted";
                    ejemplo = ejemplo.substring(1);
                    break;
                }
            }
        }
        
         //Procesamiento de la cadena
        while(!"".equals(ejemplo)){
            
            //identificación del estado actual
            for (int i=0; i<Q.length; i++){
                if(Q[i].equals(configuracion[0])){
                    estado = i;
                    break;
                }
            }
            //identificación del primer termino de la cadena
            for (int j=0; j<Sigma.length; j++){
                if(Sigma[j] == null ? ejemplo.substring(0,1) == null : Sigma[j].equals(ejemplo.substring(0,1))){
                    letra = j;
                    break;
                }
                else{
                    supervisor = 1 + supervisor;
                }
            }
            //Idetifica si una letra esta fuera del alfabeto Sigma
            if(supervisor == Sigma.length){
                System.out.append("Letra fuera del Alfabeto Sigma");
                System.exit(0);
            }
            supervisor = 0;
            
            //Si la transicion no esta definida aborta el procesamiento 
            if ("".equals(deltaG[estado][letra])){
                System.out.print("Aborted");
                System.exit(0);
            }
            
            /*La siguiente porcion de codigo es para identificar si la transición
            *de la Pila esta posiblemente mal definida, al pedir un elemento 
            *en la Pila que no se encuentra en Gamma,si lo quitaramos de todas 
            *maneras el proceso se abortaria, pero ayuda a identificar la 
            *naturaleza del Proceso, ya qu puede ser por una mala digitacion.
            */
            for (String Gamma1 : Gamma){
                if (!(Gamma1.equals(deltaG[estado][letra].substring(0,1)))){
                     supervisor = 1 + supervisor;
                }
            }
            if(supervisor == Sigma.length){
                System.out.append("Letra fuera del Alfabeto Gamma");
                System.exit(0);
            }
            supervisor = 0;
            
            //Si el Tope de la Pila no coincide con la transicion lo aborta
            //Considera $|$ y $|A como coincidencias con la pila.
            if(!(Tope.equals(deltaG[estado][letra].substring(0,1))) && !("$".equals(deltaG[estado][letra].substring(0,1)))){
                System.out.print("Aborted");
                System.exit(0);
            }
            
            //Procesa la Pila cuando la transicion es $|$ o $|A
            if ("$".equals(deltaG[estado][letra].substring(0,1))){
                for (String Gamma1 : Gamma) {
                    if (Gamma1.equals(deltaG[estado][letra].substring(2))) {
                        Pila = deltaG[estado][letra].substring(2) + Pila ;
                    }
                    else{
                        supervisor = 1 + supervisor;
                    }
                }    
            }
            //Idetifica si se intenta introducir una letra fuera del alfabeto 
            //Gamma a la Pila y aborta de ser asi.
            if(supervisor == Sigma.length){
                System.out.append("Letra fuera del Alfabeto Gamma");
                System.exit(0);
            }
            supervisor = 0;
            
            
            //Procesa la Pila cuando la transicion es A|$ o A|B
            for (String Gamma1 : Gamma){
                if (Gamma1.equals(deltaG[estado][letra].substring(0,1))){
                    //Cambia el Tope de la Pila
                    for (String Gamma2 : Gamma) {
                        if (Gamma2.equals(deltaG[estado][letra].substring(2))) {
                            Pila = deltaG[estado][letra].substring(2) + Pila.substring(1);
                         }
                    }
                    //Elimina el Tope de la Pila
                    if ("$".equals(deltaG[estado][letra].substring(2))){
                        Pila = Pila.substring(1);
                    }
                    else{
                        supervisor = 1 + supervisor;
                    }
                }
            }
            //Idetifica si se intenta introducir una letra fuera del alfabeto 
            //Gamma a la Pila y aborta de ser asi.
            if(supervisor == Sigma.length){
                System.out.append("Letra fuera del Alfabeto Gamma");
                System.exit(0);
            }
            supervisor = 0;
            
            //Actualiza el Tope de la Pila
            if(Pila.equals("")){
                Tope="";
            }
            else{
                Tope = Pila.substring(0,1); 
            }
            
            //Actualización de la cadena, el estado y la Pila (Configuracion I.)
            ejemplo = ejemplo.substring(1);
            configuracion[0] = deltaS[estado][letra];
            configuracion[1] = ejemplo;
            configuracion[2] = Pila;
            System.out.println("(" + configuracion[0] + "," + configuracion[1] + "," + configuracion[2] + ")");
        }    
        
        //verifica si el estado final es de aceptación y que la Pila este vacia
        for (String F1 : F) {
            if ((F1.equals(configuracion[0]))&&("".equals(Pila))) {
                status = "Accepted";
                break;
             }
        }
        //Imprime si es aceptada o no
        System.out.print(status);
    } 
}